using System;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Diagnostics;

namespace WebServer
{
    class Server
    {
        static void ClientThread(Object StateInfo)
        {
            new Client((TcpClient)StateInfo);
        }
        TcpListener Listener;
        public Server(int Port)
        {
            Listener = new TcpListener(IPAddress.Any, Port);
            Listener.Start();
            while (true)
            {
                ThreadPool.QueueUserWorkItem(new WaitCallback(ClientThread), Listener.AcceptTcpClient());
            }
        }
        ~Server()
        {
            if (Listener != null)
            {
                Listener.Stop();
            }
        }
        static void Main(string[] args)
        {
            int MaxThreadsCount = Environment.ProcessorCount * 4;
            ThreadPool.SetMaxThreads(MaxThreadsCount, MaxThreadsCount);
            ThreadPool.SetMinThreads(2, 2);
            new Server(80);
        }
    }
    class Client
    {
        private void SendError(TcpClient Client, int Code)
        {
            string CodeStr = Code.ToString() + " " + ((HttpStatusCode)Code).ToString();
            string Html = "<html><body><h1>" + CodeStr + "</h1></body></html>";
            string Str = "HTTP/1.1 " + CodeStr + "\nContent-type: text/html\nContent-Length:" + Html.Length.ToString() + "\n\n" + Html;
            byte[] Buffer = Encoding.ASCII.GetBytes(Str);
            Client.GetStream().Write(Buffer, 0, Buffer.Length);
            Client.Close();
        }
        public Client(TcpClient Client)
        {

            string Request = "";
            byte[] Buffer = new byte[1024];
            int Count;

            while ((Count = Client.GetStream().Read(Buffer, 0, Buffer.Length)) > 0)
            {
                Request += Encoding.ASCII.GetString(Buffer, 0, Count);
                Console.WriteLine(Request);
                if (Request.IndexOf("\r\n\r\n") >= 0 || Request.Length > 4096)
                {
                    break;
                }
            }
                if (Request.StartsWith("POST")){
                Console.WriteLine("dmkfhnsgkldfhgnkdfbhmghjdfsui");
                var user_name = Request.Substring(Request.LastIndexOf('='));
                user_name = user_name.Substring(1);
                Console.WriteLine(user_name);

                //Process iStartProcess = new Process();
                //iStartProcess.StartInfo.FileName = "C:/Users/vladp/Desktop/test.bat";
                //iStartProcess.StartInfo.Arguments = user_name;
                //iStartProcess.Start();
                //iStartProcess.WaitForExit(120000);

                FileStream file = new FileStream("C:/Users/vladp/Desktop/1.txt", FileMode.OpenOrCreate);
                byte[] array = new byte[file.Length];
                file.Read(array, 0, array.Length);
                string textFromFile = System.Text.Encoding.Default.GetString(array);
                Console.WriteLine($"Текст из файла: {textFromFile}");

            }

                Match ReqMatch = Regex.Match(Request, @"^\w+\s+([^\s\?]+)[^\s]*\s+HTTP/.*|");
                if (ReqMatch == Match.Empty)
                {
                    SendError(Client, 400);
                    return;
                }

                string RequestUri = ReqMatch.Groups[1].Value;
                RequestUri = Uri.UnescapeDataString(RequestUri);
                Console.WriteLine(RequestUri);
                
                if (RequestUri.IndexOf("..") >= 0)
                {
                    SendError(Client, 400);
                    return;
                }
                if (RequestUri.EndsWith("/"))
                {
                    RequestUri += "index.html";
                }

            string dir = Directory.GetCurrentDirectory();
            Console.WriteLine(dir);
            string FilePath = "C:/Users/vladp/source/repos/WebServer/www" + RequestUri;
                Console.WriteLine("FilePath: "+FilePath);

                if (!File.Exists(FilePath))
                {
                    SendError(Client, 404);
                    Console.WriteLine("Error 404");
                    return;
                }
                string Extension = RequestUri.Substring(RequestUri.LastIndexOf('.'));
                
                
                string ContentType = "";

                switch (Extension)
                {
                    case ".htm":
                    case ".html":
                        ContentType = "text/html";
                        break;
                    case ".css":
                        ContentType = "text/stylesheet";
                        break;
                    case ".js":
                        ContentType = "text/javascript";
                        break;
                    case ".jpg":
                        ContentType = "image/jpeg";
                        break;
                    case ".jpeg":
                    case ".png":
                    case ".gif":
                        ContentType = "image/" + Extension.Substring(1);
                        break;
                    default:
                        if (Extension.Length > 1)
                        {
                            ContentType = "application/" + Extension.Substring(1);
                        }
                        else
                        {
                            ContentType = "application/unknown";
                        }
                        break;
                }
                FileStream FS;
                try
                {
                    FS = new FileStream(FilePath, FileMode.Open, FileAccess.Read, FileShare.Read);
                }
                catch (Exception)
                {
                    SendError(Client, 500);
                    return;
                }
                string Headers = "HTTP/1.1 200 OK\nContent-Type: " + ContentType + "\nContent-Length: " + FS.Length + "\n\n";
                byte[] HeadersBuffer = Encoding.ASCII.GetBytes(Headers);
                Client.GetStream().Write(HeadersBuffer, 0, HeadersBuffer.Length);
                while (FS.Position < FS.Length)
                {
                    Count = FS.Read(Buffer, 0, Buffer.Length);
                    Client.GetStream().Write(Buffer, 0, Count);
                }
                FS.Close();
                Client.Close();
            }
        }
    }
